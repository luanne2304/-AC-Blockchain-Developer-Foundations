 // SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    struct Candidate {
        string name;
        uint voteCount;
    }

    address private owner;

    mapping(uint => Candidate) private candidates;
    uint private candidateCount;

    mapping(address => bool) private  hasVoted;

    event Voted(address indexed voter, uint indexed candidateId);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can do this");
        _;
    }

    function addCandidate(string calldata name) external onlyOwner {
        candidates[candidateCount] = Candidate({
            name: name,
            voteCount: 0
        });
        candidateCount++;
    }

    function vote(uint candidateId) external {
        require(!hasVoted[msg.sender], "You already voted");
        require(candidateId < candidateCount, "Invalid candidate");

        hasVoted[msg.sender] = true;
        candidates[candidateId].voteCount++;

        emit Voted(msg.sender, candidateId);
    }

    function getCandidate(uint candidateId) external view returns (string memory, uint) {
        require(candidateId < candidateCount, "Invalid candidate");
        Candidate memory c = candidates[candidateId];
        return (c.name, c.voteCount);
    }
}
